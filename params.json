{"name":"miniconf","tagline":"A minimalist C++ configuration manager","body":"\r\n# miniconf\r\n\r\nA minimalist C++ configuration manager\r\n\r\n\r\n## Features\r\n\r\n   This is a simple manager to read, store and serialize application\r\n   settings of a C++ program. The main features are:\r\n\r\n    * Define simple application settings easily\r\n    * Parse settings from command line arguments\r\n    * Format checking, user input validation, default values, etc.\r\n    * Generate help and usage message automatically\r\n    * Support simple JSON and CVS serialization\r\n    \r\n------------------------------------------------------------------------\r\n\r\n## miniconf --- A quick start\r\n\r\n#### An Example\r\n\r\nMiniconf uses a very simple API for configuring for an application, a working example is shown below:\r\n\r\n```c++\r\nint main(int argc, char** argv)\r\n{\r\n   // create a Config object\r\n   thyu::Config conf;\r\n   \r\n   // Setup config options \r\n   // Option properties, e.g. short flag\r\n   conf.option(\"numOpt\").shortflag(\"n\").defaultValue(3.14).required(false).description(\"A number value\");\r\n   conf.option(\"boolOpt\").shortflag(\"b\").defaultValue(false).required(true).description(\"A boolean value\");\r\n   conf.option(\"strOpt\").shortflag(\"s\").defaultValue(\"string\").required(true).description(\"A string value\");\r\n   \r\n   // parse \r\n   conf.parse(argc, argv);\r\n   \r\n   // processing the configuration here ...\r\n   \r\n   return 0;\r\n}\r\n```\r\n\r\n------------------------------------------------------------------------\r\n\r\n#### Configuring an application via command line / input file\r\n\r\nUser can modify the configuration settings by command line, for example:\r\n\r\n```bash\r\n$ ./program --numOpt 6.28 --boolOpt true -s \"another string\"\r\n```\r\n\r\nAlternatively, a config file can also be used, for example:\r\n\r\n```bash\r\n$ ./program --config settings.json -s \"another string\"\r\n```\r\n\r\nWhere the content of config file \"settings.json\" is:\r\n\r\n```json\r\n{\r\n   \"numOpt\": 6.28,\r\n   \"boolOpt\": true, \r\n   \"stringOpt\": \"this will be overwritten\"\r\n}\r\n```\r\nNote that command-line arguments has a higher priority so the attribute \"stringOpt\" in the json file will be overwritten by \"-s/--stringOpt\" in the command-line. \r\n\r\nThe configurations in the above two examples should be the same when parsed by miniconf:\r\n \r\n* _numOpt_ = 6.28\r\n* _boolOpt_ = true\r\n* _stringOpt_ = \"another string\"\r\n\r\n------------------------------------------------------------------------\r\n\r\n#### Reading configuration settings\r\n\r\nConfiguration values can be read by specifying their type _implicitly_, if output data type can be determined, for example:\r\n\r\n```c++\r\ndouble n = conf[\"numOpt\"];\r\nbool b = conf[\"boolOpt\"];\r\nstd::string s = conf[\"strOpt\"];\r\n```\r\n\r\nor, user may also define the configuration value _explicitly_:\r\n\r\n```c++\r\ndouble n = conf[\"numOpt\"].getNumber();\r\nbool b = conf[\"boolOpt\"].getBoolean();\r\nstd::string s = conf[\"strOpt\"].getString();\r\n```\r\n\r\n------------------------------------------------------------------------\r\n\r\n#### Modifying configuration settings\r\n\r\nConfiguration values can also be modified during runtime:\r\n\r\n```c++\r\nconf[\"numOpt\"] = 9.42;\r\nconf[\"strOpt\"] = \"fourth string\";\r\nconf[\"boolOpt\"] = false;\r\n```\r\nOr one can also do explicitly\r\n\r\n```c++\r\nconf[\"numOpt\"] = thyu::Value(12.56);\r\n```\r\n\r\n------------------------------------------------------------------------\r\n\r\n#### Generated help / usage message\r\n\r\n```\r\n[[[  USAGE  ]]]\r\n\r\n    example -b <BOOLEAN> [-cfg <STRING>] [-h <BOOLEAN>] [-n <NUMBER>] -s <STRING> \r\n\r\n\r\n[[[  HELP  ]]]\r\n\r\n    -b, --boolOpt <REQUIRED>\r\n        A boolean value  ( DEFAULT = false ) \r\n\r\n    -cfg, --config \r\n        Load the config file. Config format is determined by the file's extenion. If no file extension is found, default JSON loader is used  ( DEFAULT = \"\" ) \r\n\r\n    -h, --help \r\n        Display the help message  ( DEFAULT = false ) \r\n\r\n    -n, --numOpt \r\n        A number value  ( DEFAULT = 3.140000 ) \r\n\r\n    -s, --strOpt <REQUIRED>\r\n        A string value  ( DEFAULT = \"string\" ) \r\n```\r\n\r\n------------------------------------------------------------------------\r\n\r\n#### Serialization / programmatic config file loading\r\n\r\n#### Print current configuration summary\r\n\r\n#### Extra configuration values\r\n\r\n#### validation and logging\r\n\r\n### Author \r\n\r\nTsz-Ho Yu (thyu413@gmail.com)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}